name: conchayoro-pipeline-ecr-ebs

on:
  workflow_dispatch:
    inputs:
      deploy-production:
        description: 'Deploy to production with manual approval'
        required: false
        default: 'false'
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  PROJECT_NAME: ${{ vars.PROJECT_NAME }}
  MODULE_NAME: ${{ vars.MODULE_NAME }}
  TAG: latest
  STACK_NAME: "64bit Amazon Linux 2 v3.5.7 running Docker"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MODULE_FULLNAME: ${{ vars.PROJECT_NAME }}/${{ vars.MODULE_NAME }}
      REGISTRY_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
      - run: docker build -t $MODULE_FULLNAME $MODULE_NAME
      - run: |
          docker tag $MODULE_FULLNAME:$TAG \
          $REGISTRY_URL/$MODULE_FULLNAME:$TAG
      - run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $REGISTRY_URL
      - run: docker push $REGISTRY_URL/$MODULE_FULLNAME:$TAG
      - uses: actions/upload-artifact@v3
        with:
          name: ebconfig
          path: |
            frontend/.elasticbeanstalk/config.yml
            frontend/Dockerrun.aws.json

  deploy-homolog:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ebconfig
          path: .
      - run: |
          sed -i='' "s/<AWS_ACCOUNT_ID>/$AWS_ACCOUNT_ID/" Dockerrun.aws.json
          sed -i='' "s/<PROJECT_NAME>/$PROJECT_NAME/" Dockerrun.aws.json
          sed -i='' "s/<MODULE_NAME>/$MODULE_NAME/" Dockerrun.aws.json
          sed -i='' "s/<TAG>/$TAG/" Dockerrun.aws.json
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - run: |
          python -m pip install --upgrade pip
          pip install awsebcli      
      - run: |           
          eb deploy --verbose

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.deploy-production == 'true'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ebconfig
          path: .
      - run: |
          sed -i='' "s/<AWS_ACCOUNT_ID>/$AWS_ACCOUNT_ID/" Dockerrun.aws.json
          sed -i='' "s/<PROJECT_NAME>/$PROJECT_NAME/" Dockerrun.aws.json
          sed -i='' "s/<MODULE_NAME>/$MODULE_NAME/" Dockerrun.aws.json
          sed -i='' "s/<TAG>/$TAG/" Dockerrun.aws.json
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - run: |
          python -m pip install --upgrade pip
          pip install awsebcli      
      - name: 'Deploy to production with manual approval'
        run: echo "Deploy to production, awaiting manual approval"
      - name: 'Request approval'
        id: approval
        uses: actions/github-script@v4
        with:
          script: |
            const response = await github.pulls.createReviewRequest({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.workflow_run.head_branch,
              reviewers: ['GabrielBat1sta']
            });

            core.setOutput('approval-url', response.data.html_url);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  manual-approval:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    steps:
      - name: 'Check approval status'
        run: echo "Approval status:${{ needs.deploy-production.outputs.approved }}"
      - name: 'Manual approval step'
        if: needs.deploy-production.outputs.approved == 'true'
        run: |
          echo "Production deployment approved. Deploying to production now."
          # Adicione aqui os passos necessários para implantar no ambiente de produção
      - name: 'Manual rejection step'
        if: needs.deploy-production.outputs.approved != 'true'
        run: |
          echo "Production deployment not approved. Skipping deployment."
